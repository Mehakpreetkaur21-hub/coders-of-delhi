Finding "People You May Know"
Now that our data is cleaned and structured, your manager assigns you a new task: Build a 'People You May Know' feature!

In social networks, this feature helps users connect with others by suggesting friends based on mutual connections. Your job is to analyze mutual friends and recommend potential connections.

Task 1: Understand the Logic
How 'People You May Know' Works:
If User A and User B are not friends but have mutual friends, we suggest User B to User A and vice versa.
More mutual friends = higher priority recommendation.
Example:

Amit (ID: 1) is friends with Priya (ID: 2) and Rahul (ID: 3).
Priya (ID: 2) is friends with Sara (ID: 4).
Amit is not directly friends with Sara, but they share Priya as a mutual friend.
Suggest Sara to Amit as "People You May Know".
But there are cases where we will have more than one "People You May Know". In those cases, greater the number of mutual friends, higher the probability that the user might know the person we are recommending.

Task 2: Implement the Algorithm
We'll create a function that:

Finds all friends of a given user.
Identifies mutual friends between non-friends.
Ranks recommendations by the number of mutual friends.
Code Implementation
import json
 
def load_data(filename):
    with open(filename, "r") as file:
        return json.load(file)
 
def find_people_you_may_know(user_id, data):
    user_friends = {}
    for user in data["users"]:
        user_friends[user["id"]] = set(user["friends"])
    
    if user_id not in user_friends:
        return []
    
    direct_friends = user_friends[user_id]
    suggestions = {}
    
    for friend in direct_friends:
        # For all friends of friend
        for mutual in user_friends[friend]:
            # If mutual id is not the same user and not already a direct friend of user
            if mutual != user_id and mutual not in direct_friends:
                # Count mutual friends
                suggestions[mutual] = suggestions.get(mutual, 0) + 1
    
    sorted_suggestions = sorted(suggestions.items(), key=lambda x: x[1], reverse=True)
    return [user_id for user_id, _ in sorted_suggestions]
 
# Load data
data = load_data("cleaned_codebook_data.json")
user_id = 1  # Example: Finding suggestions for Amit
recommendations = find_people_you_may_know(user_id, data)
print(f"People You May Know for User {user_id}: {recommendations}")

Expected Output:
If Amit (ID: 1) and Sara (ID: 4) share Priya (ID: 2) as a mutual friend, the output might be:

People You May Know for User 1: [4]
This suggests that Amit should connect with Sara!

The Fontend developer of CodeBook can use this data via API and show it in the frontend when Amit logs in
